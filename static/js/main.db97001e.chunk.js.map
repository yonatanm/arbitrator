{"version":3,"sources":["loading-buffering.gif","MyDropzone.js","Arbitrator.js","reportWebVitals.js","index.js"],"names":["MyDropzone","useState","wait","setWait","done","setDone","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","exec","encoded","bin","atob","binaryLen","length","bytes","Uint8Array","i","charCodeAt","setTimeout","now","Date","nameSuffix","getYear","getMonth","getDate","getHours","getMinutes","getSeconds","data","Blob","type","url","window","URL","createObjectURL","tempLink","document","createElement","href","setAttribute","click","readAsText","useDropzone","getRootProps","getInputProps","class","src","spinner","onClick","location","reload","Arbitrator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iOAAe,MAA0B,8C,OCsE1BA,MAhEf,WAAuB,IAAD,EAEIC,oBAAS,GAFb,mBAEbC,EAFa,KAEPC,EAFO,OAGIF,oBAAS,GAHb,mBAGbG,EAHa,KAGPC,EAHO,KAKdC,EAASC,uBAAY,SAACC,GAC1BA,EAAcC,SAAQ,SAACC,GACrB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,kBAAMF,QAAQC,IAAI,4BACnCJ,EAAOM,OAAS,WAEd,IAAMC,EAAYP,EAAOQ,OAKnBC,EAHE,+CAGOA,KAAKF,GACpBJ,QAAQC,IAAI,OAAQK,GAU5B,IATQ,IAAMC,EAASD,EAAK,GAEdE,EAAMC,KAAKF,GAGbG,EAAYF,EAAIG,OAExBC,EAAQ,IAAIC,WAAWH,GAElBI,EAAI,EAAGA,EAAIJ,EAAWI,IAC3BF,EAAME,GAAKN,EAAIO,WAAWD,GAE9BzB,GAAQ,GAER2B,YAAY,WACRzB,GAAQ,GACRF,GAAQ,GACJ,IAAM4B,EAAM,IAAIC,KACVC,EAAU,UAAMF,EAAIG,UAAU,KAApB,YAA4BH,EAAII,WAAW,EAA3C,YAAgDJ,EAAIK,UAApD,YAAiEL,EAAIM,SAArE,YAAiFN,EAAIO,aAArF,YAAqGP,EAAIQ,cACrHC,EAAO,IAAIC,KAAK,CAACf,GAAQ,CAACgB,KAAM,oBAChCC,EAAMC,OAAOC,IAAIC,gBAAgBN,GACvCO,EAAWC,SAASC,cAAc,KACxCF,EAASG,KAAOP,EAChBI,EAASI,aAAa,WAAtB,mBAA8ClB,EAA9C,SACAc,EAASK,UAEN,MAEGzC,EAAO0C,WAAW3C,EAAM,cAEzB,IAlDiB,EAmDoB4C,YAAY,CAAEhD,WAA9CiD,EAnDY,EAmDZA,aAAcC,EAnDF,EAmDEA,cAGtB,OACE,gDAASD,KAAT,cACE,qCAAWC,MACTtD,GAASE,EAAuE,6BAAjE,wDAA0B,sDAC1CF,IAASE,EAAO,qBAAKqD,MAAM,SAASC,IAAKC,IAAkB,6BAC3DvD,EAAM,wBAAQwD,QAAS,kBAAIhB,OAAOiB,SAASC,UAArC,kCAA6E,kCCpD3EC,MAVf,WACE,OACE,8BACE,cAAC,EAAD,CAAYzD,OAAQ,SAACE,GAAD,OAAmBM,QAAQC,IAAIP,SCM1CwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,SAM1BZ,M","file":"static/js/main.db97001e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading-buffering.c7d9f081.gif\";","import React, { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport spinner from './loading-buffering.gif';\n\n\n\nfunction MyDropzone() {\n\n  const [wait, setWait] = useState(false)\n  const [done, setDone] = useState(false)\n\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n\n        let r = /<DocumentContent.*>(.*)<\\/DocumentContent>/gm\n\n        // console.log(binaryStr)\n        const exec = r.exec(binaryStr)\n        console.log('exec', exec)\n        const encoded= exec[1]\n        // console.log(\"encoded\",encoded)\n        const bin = atob(encoded)\n        // console.log(\"bin\", bin)\n\n        let binaryLen = bin.length;\n\nlet bytes = new Uint8Array(binaryLen);\n\nfor (let i = 0; i < binaryLen; i++) {\n    bytes[i] = bin.charCodeAt(i);\n}\nsetWait(true)\n\nsetTimeout( ()=> {\n    setDone(true)\n    setWait(false)\n        const now = new Date()\n        const nameSuffix = `${now.getYear()+1990}_${now.getMonth()+1}_${now.getDate()}_${now.getHours}_${now.getMinutes()}_${now.getSeconds()}`\n        var data = new Blob([bytes], {type: 'application/pdf'});\n        var url = window.URL.createObjectURL(data);\nconst tempLink = document.createElement('a');\ntempLink.href = url;\ntempLink.setAttribute('download', `document_${nameSuffix}.pdf`);\ntempLink.click()\n\n}, 1000)\n      };\n      reader.readAsText(file, 'utf-8');\n    });\n  }, []);\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      {!wait && !done? <div>upload the .sgn file:<button>Choose a file</button></div> : <></>}\n      {wait && !done ? <img class='center' src={spinner}></img> : <></>}      \n      {done? <button onClick={()=>window.location.reload()}>Click to do it again</button>:<></> }\n    </div>\n  );\n}\n\nexport default MyDropzone;\n","import \"./Arbitrator.css\";\nimport MyDropzone from \"./MyDropzone.js\"\n\nfunction Arbitrator() {\n  return (\n    <div>\n      <MyDropzone onDrop={(acceptedFiles) => console.log(acceptedFiles)}>\n        \n      </MyDropzone>\n    </div>\n  );\n}\n\nexport default Arbitrator;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Arbitrator from './Arbitrator';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Arbitrator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}